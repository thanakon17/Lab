// Global variables
let isSubmitting = false;

// DOM Elements
const contactForm = document.getElementById('contactForm');
const feedbackForm = document.getElementById('feedbackForm');
const statusMessages = document.getElementById('statusMessages');
const apiResults = document.getElementById('apiResults');
const ratingSlider = document.getElementById('rating');
const ratingValue = document.getElementById('ratingValue');

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    initializeForms();
    setupEventListeners();
});

function initializeForms() {
    // Update rating display
    ratingSlider.addEventListener('input', () => {
        ratingValue.textContent = ratingSlider.value;
    });
}

function setupEventListeners() {
    // Contact form submission
    contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await submitContactForm();
    });

    // Feedback form submission
    feedbackForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await submitFeedbackForm();
    });

    // TODO: (Bonus) ‡πÄ‡∏û‡∏¥‡πà‡∏° real-time validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input fields
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
    document.getElementById('name').addEventListener('input', (e) => {
        validateField(e.target, 'nameError', val => val.length >= 2 && val.length <= 100, 'Name must be 2-100 chars');
    });
    document.getElementById('email').addEventListener('input', (e) => {
        validateField(e.target, 'emailError', val => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val), 'Must be a valid email');
    });
    document.getElementById('phone').addEventListener('input', (e) => {
        validateField(e.target, 'phoneError', val => val.length === 0 || /^[0-9]{9,10}$/.test(val), 'Must be 9-10 digits or empty');
    });
}

// TODO: (Bonus) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validateField ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client-side validation
function validateField(inputElement, errorElementId, validationFn, errorMessage) {
    const errorElement = document.getElementById(errorElementId);
    const value = inputElement.value.trim();
    
    if (validationFn(value)) {
        inputElement.classList.add('valid');
        inputElement.classList.remove('invalid');
        errorElement.textContent = '';
    } else {
        inputElement.classList.add('invalid');
        inputElement.classList.remove('valid');
        errorElement.textContent = errorMessage;
    }
}

async function submitContactForm() {
    if (isSubmitting) return;
    
    const formData = new FormData(contactForm);
    const data = Object.fromEntries(formData.entries());
    
    try {
        isSubmitting = true;
        updateSubmitButton('contactSubmit', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...', true);
        
        const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showStatusMessage('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß', 'success');
            contactForm.reset();
        } else {
            // ‡∏£‡∏ß‡∏° error messages ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const errorMessage = result.errors ? result.errors.join(', ') : result.message;
            showStatusMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`, 'error');
        }
    } catch (error) {
        showStatusMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
        console.error('Error:', error);
    } finally {
        isSubmitting = false;
        updateSubmitButton('contactSubmit', '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', false);
    }
}

async function submitFeedbackForm() {
    if (isSubmitting) return;
    
    const formData = new FormData(feedbackForm);
    const data = Object.fromEntries(formData.entries());
    // ‡πÅ‡∏õ‡∏•‡∏á rating ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    data.rating = parseInt(data.rating, 10);
    
    try {
        isSubmitting = true;
        updateSubmitButton('feedbackSubmit', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...', true);
        
        // TODO: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á /api/feedback endpoint
        const response = await fetch('/api/feedback', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        // TODO: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ response ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if (result.success) {
            showStatusMessage('‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô!', 'success');
            feedbackForm.reset();
            // Reset slider display
            ratingValue.textContent = '3';
        } else {
            const errorMessage = result.errors ? result.errors.join(', ') : result.message;
            showStatusMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorMessage}`, 'error');
        }
        
    } catch (error) {
        showStatusMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
        console.error('Error:', error);
    } finally {
        isSubmitting = false;
        updateSubmitButton('feedbackSubmit', '‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô', false);
    }
}

function showStatusMessage(message, type) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `status-message ${type}`;
    messageDiv.textContent = message;
    
    statusMessages.appendChild(messageDiv);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        messageDiv.remove();
    }, 5000);
}

function updateSubmitButton(buttonId, text, disabled) {
    const button = document.getElementById(buttonId);
    button.textContent = text;
    button.disabled = disabled;
}

// (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô submitContactForm ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time validation)
function displayValidationErrors(errors) {
    errors.forEach(error => {
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞ map error ‡∏Å‡∏±‡∏ö field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô status message ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        showStatusMessage(`üî∏ ${error}`, 'error');
    });
}

// Helper function for API Testing
async function testApiEndpoint(endpoint, element) {
     try {
        element.textContent = `Loading ${endpoint}...`;
        const response = await fetch(endpoint);
        const data = await response.json();
        element.textContent = JSON.stringify(data, null, 2);
    } catch (error) {
        element.textContent = `Error loading ${endpoint}: ${error.message}`;
    }
}

// API Testing Functions
function loadContacts() {
    // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GET /api/contact ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    testApiEndpoint('/api/contact', apiResults);
}

function loadFeedbackStats() {
    // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GET /api/feedback/stats ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    testApiEndpoint('/api/feedback/stats', apiResults);
}

function loadAPIStatus() {
    // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GET /api/status ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    testApiEndpoint('/api/status', apiResults);
}

async function loadAPIDocs() {
    // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
    try {
        apiResults.textContent = 'Loading API docs...';
        const response = await fetch('/api/docs');
        const data = await response.json();
        apiResults.textContent = JSON.stringify(data, null, 2);
    } catch (error) {
        apiResults.textContent = 'Error loading API docs: ' + error.message;
    }
}