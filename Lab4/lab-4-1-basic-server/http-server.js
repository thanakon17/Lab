const http = require('http');
const url = require('url');
const PORT = 3000;

// TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á students array
const students = [
    { id: 1, name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', major: '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', year: 3 },
    { id: 2, name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à', major: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', year: 2 },
    { id: 3, name: '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', major: '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®', year: 4 },
    { id: 4, name: '‡∏°‡∏≤‡∏ô‡∏µ ‡∏°‡∏µ‡∏ô‡∏≤', major: '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', year: 2 },
];

const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    const method = req.method;

    // Set CORS headers and Content-Type
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    // TODO: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ route GET /
    if (pathname === '/' && method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify({
            message: 'Welcome to the Basic HTTP Server!',
            endpoints: [
                'GET /',
                'GET /students',
                'GET /students/:id',
                'GET /students/major/:major'
            ]
        }));
    }
    // TODO: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ route GET /students
    else if (pathname === '/students' && method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify(students));
    }
    // TODO: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ route GET /students/:id
    // ‡πÉ‡∏ä‡πâ Regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö /students/[‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç]
    else if (pathname.match(/^\/students\/(\d+)$/) && method === 'GET') {
        const id = parseInt(pathname.split('/')[2]);
        const student = students.find(s => s.id === id);

        if (student) {
            res.writeHead(200);
            res.end(JSON.stringify(student));
        } else {
            res.writeHead(404);
            res.end(JSON.stringify({ message: `Student with id ${id} not found` }));
        }
    }
    // TODO: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ route GET /students/major/:major
    // ‡πÉ‡∏ä‡πâ Regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö /students/major/[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]
    else if (pathname.match(/^\/students\/major\/(.+)$/) && method === 'GET') {
        // decodeURIComponent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö URL ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô %E0%B8%A7%E0%B8%B4%E0%B8%A8%E0%B8%A7...)
        const major = decodeURIComponent(pathname.split('/')[3]);
        const filteredStudents = students.filter(s => s.major.toLowerCase() === major.toLowerCase());

        res.writeHead(200);
        res.end(JSON.stringify(filteredStudents));
    }
    // TODO: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ 404 Not Found
    else {
        res.writeHead(404);
        res.end(JSON.stringify({ message: 'Endpoint not found' }));
    }
});

server.listen(PORT, () => {
    console.log(`üåê HTTP Server running on http://localhost:${PORT}`);
    console.log('Available endpoints:');
    console.log('  GET /');
    console.log('  GET /students');
    console.log('  GET /students/:id');
    console.log('  GET /students/major/:major');
});